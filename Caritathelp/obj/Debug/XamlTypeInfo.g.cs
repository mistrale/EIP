//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Caritathelp
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Caritathelp.Caritathelp_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Caritathelp.Caritathelp_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[43];
            _typeNameTable[0] = "Caritathelp.All.BasePage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[2] = "Caritathelp.All.GUI.PopField";
            _typeNameTable[3] = "Caritathelp.All.GUI.ErrorControl";
            _typeNameTable[4] = "Caritathelp.All.Accueil";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[6] = "Caritathelp.All.GUI.CommentContro";
            _typeNameTable[7] = "Caritathelp.All.GUI.ConfirmControl";
            _typeNameTable[8] = "Caritathelp.All.GUI.CreateGUI.CheckField";
            _typeNameTable[9] = "Caritathelp.All.GUI.CreateGUI.ComboBoxControl";
            _typeNameTable[10] = "Caritathelp.All.GUI.CreateGUI.DateControls";
            _typeNameTable[11] = "Caritathelp.All.GUI.CreateGUI.DescriptionControls";
            _typeNameTable[12] = "Caritathelp.All.GUI.CreateGUI.HourControl";
            _typeNameTable[13] = "Caritathelp.All.GUI.CreateGUI.TitleContro";
            _typeNameTable[14] = "Caritathelp.All.GUI.InputBox";
            _typeNameTable[15] = "Caritathelp.All.GUI.InvitationWaiting";
            _typeNameTable[16] = "Caritathelp.All.GUI.ListManagement";
            _typeNameTable[17] = "Caritathelp.All.GUI.ManagementButton";
            _typeNameTable[18] = "Caritathelp.All.GUI.Message.ListMessageControl";
            _typeNameTable[19] = "Caritathelp.All.GUI.Message.MessageControl";
            _typeNameTable[20] = "Caritathelp.All.GUI.NewControle";
            _typeNameTable[21] = "Caritathelp.All.GUI.Notification";
            _typeNameTable[22] = "Caritathelp.All.GUI.ReceivedInviation";
            _typeNameTable[23] = "Caritathelp.All.GUI.SearchItem";
            _typeNameTable[24] = "Caritathelp.All.Models.GenericCreationModel";
            _typeNameTable[25] = "Caritathelp.All.Models.GenericInvitation";
            _typeNameTable[26] = "Caritathelp.All.Models.GenericListModel";
            _typeNameTable[27] = "Caritathelp.All.Models.GenericListModelManagement";
            _typeNameTable[28] = "Caritathelp.All.Models.GenericManagement";
            _typeNameTable[29] = "Caritathelp.All.Models.GenericNotification";
            _typeNameTable[30] = "Caritathelp.All.Models.GenericProfil";
            _typeNameTable[31] = "Caritathelp.All.Models.VolunteerPart.PasswordChange";
            _typeNameTable[32] = "Caritathelp.All.Options";
            _typeNameTable[33] = "Caritathelp.All.FinalInscription";
            _typeNameTable[34] = "Caritathelp.All.Inscription";
            _typeNameTable[35] = "Windows.UI.Xaml.Controls.TextBox";
            _typeNameTable[36] = "Windows.UI.Xaml.Controls.TextBlock";
            _typeNameTable[37] = "Caritathelp.MainPage";
            _typeNameTable[38] = "Caritathelp.All.Research";
            _typeNameTable[39] = "Caritathelp.Message.CreateMessage";
            _typeNameTable[40] = "Caritathelp.Message.Message";
            _typeNameTable[41] = "Caritathelp.Message.MessageProfil";
            _typeNameTable[42] = "Caritathelp.Message.UpdageMessage";

            _typeTable = new global::System.Type[43];
            _typeTable[0] = typeof(global::Caritathelp.All.BasePage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[2] = typeof(global::Caritathelp.All.GUI.PopField);
            _typeTable[3] = typeof(global::Caritathelp.All.GUI.ErrorControl);
            _typeTable[4] = typeof(global::Caritathelp.All.Accueil);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[6] = typeof(global::Caritathelp.All.GUI.CommentContro);
            _typeTable[7] = typeof(global::Caritathelp.All.GUI.ConfirmControl);
            _typeTable[8] = typeof(global::Caritathelp.All.GUI.CreateGUI.CheckField);
            _typeTable[9] = typeof(global::Caritathelp.All.GUI.CreateGUI.ComboBoxControl);
            _typeTable[10] = typeof(global::Caritathelp.All.GUI.CreateGUI.DateControls);
            _typeTable[11] = typeof(global::Caritathelp.All.GUI.CreateGUI.DescriptionControls);
            _typeTable[12] = typeof(global::Caritathelp.All.GUI.CreateGUI.HourControl);
            _typeTable[13] = typeof(global::Caritathelp.All.GUI.CreateGUI.TitleContro);
            _typeTable[14] = typeof(global::Caritathelp.All.GUI.InputBox);
            _typeTable[15] = typeof(global::Caritathelp.All.GUI.InvitationWaiting);
            _typeTable[16] = typeof(global::Caritathelp.All.GUI.ListManagement);
            _typeTable[17] = typeof(global::Caritathelp.All.GUI.ManagementButton);
            _typeTable[18] = typeof(global::Caritathelp.All.GUI.Message.ListMessageControl);
            _typeTable[19] = typeof(global::Caritathelp.All.GUI.Message.MessageControl);
            _typeTable[20] = typeof(global::Caritathelp.All.GUI.NewControle);
            _typeTable[21] = typeof(global::Caritathelp.All.GUI.Notification);
            _typeTable[22] = typeof(global::Caritathelp.All.GUI.ReceivedInviation);
            _typeTable[23] = typeof(global::Caritathelp.All.GUI.SearchItem);
            _typeTable[24] = typeof(global::Caritathelp.All.Models.GenericCreationModel);
            _typeTable[25] = typeof(global::Caritathelp.All.Models.GenericInvitation);
            _typeTable[26] = typeof(global::Caritathelp.All.Models.GenericListModel);
            _typeTable[27] = typeof(global::Caritathelp.All.Models.GenericListModelManagement);
            _typeTable[28] = typeof(global::Caritathelp.All.Models.GenericManagement);
            _typeTable[29] = typeof(global::Caritathelp.All.Models.GenericNotification);
            _typeTable[30] = typeof(global::Caritathelp.All.Models.GenericProfil);
            _typeTable[31] = typeof(global::Caritathelp.All.Models.VolunteerPart.PasswordChange);
            _typeTable[32] = typeof(global::Caritathelp.All.Options);
            _typeTable[33] = typeof(global::Caritathelp.All.FinalInscription);
            _typeTable[34] = typeof(global::Caritathelp.All.Inscription);
            _typeTable[35] = typeof(global::Windows.UI.Xaml.Controls.TextBox);
            _typeTable[36] = typeof(global::Windows.UI.Xaml.Controls.TextBlock);
            _typeTable[37] = typeof(global::Caritathelp.MainPage);
            _typeTable[38] = typeof(global::Caritathelp.All.Research);
            _typeTable[39] = typeof(global::Caritathelp.Message.CreateMessage);
            _typeTable[40] = typeof(global::Caritathelp.Message.Message);
            _typeTable[41] = typeof(global::Caritathelp.Message.MessageProfil);
            _typeTable[42] = typeof(global::Caritathelp.Message.UpdageMessage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_BasePage() { return new global::Caritathelp.All.BasePage(); }
        private object Activate_2_PopField() { return new global::Caritathelp.All.GUI.PopField(); }
        private object Activate_3_ErrorControl() { return new global::Caritathelp.All.GUI.ErrorControl(); }
        private object Activate_4_Accueil() { return new global::Caritathelp.All.Accueil(); }
        private object Activate_14_InputBox() { return new global::Caritathelp.All.GUI.InputBox(); }
        private object Activate_15_InvitationWaiting() { return new global::Caritathelp.All.GUI.InvitationWaiting(); }
        private object Activate_16_ListManagement() { return new global::Caritathelp.All.GUI.ListManagement(); }
        private object Activate_17_ManagementButton() { return new global::Caritathelp.All.GUI.ManagementButton(); }
        private object Activate_20_NewControle() { return new global::Caritathelp.All.GUI.NewControle(); }
        private object Activate_22_ReceivedInviation() { return new global::Caritathelp.All.GUI.ReceivedInviation(); }
        private object Activate_23_SearchItem() { return new global::Caritathelp.All.GUI.SearchItem(); }
        private object Activate_24_GenericCreationModel() { return new global::Caritathelp.All.Models.GenericCreationModel(); }
        private object Activate_25_GenericInvitation() { return new global::Caritathelp.All.Models.GenericInvitation(); }
        private object Activate_26_GenericListModel() { return new global::Caritathelp.All.Models.GenericListModel(); }
        private object Activate_27_GenericListModelManagement() { return new global::Caritathelp.All.Models.GenericListModelManagement(); }
        private object Activate_28_GenericManagement() { return new global::Caritathelp.All.Models.GenericManagement(); }
        private object Activate_29_GenericNotification() { return new global::Caritathelp.All.Models.GenericNotification(); }
        private object Activate_30_GenericProfil() { return new global::Caritathelp.All.Models.GenericProfil(); }
        private object Activate_31_PasswordChange() { return new global::Caritathelp.All.Models.VolunteerPart.PasswordChange(); }
        private object Activate_32_Options() { return new global::Caritathelp.All.Options(); }
        private object Activate_33_FinalInscription() { return new global::Caritathelp.All.FinalInscription(); }
        private object Activate_34_Inscription() { return new global::Caritathelp.All.Inscription(); }
        private object Activate_37_MainPage() { return new global::Caritathelp.MainPage(); }
        private object Activate_38_Research() { return new global::Caritathelp.All.Research(); }
        private object Activate_39_CreateMessage() { return new global::Caritathelp.Message.CreateMessage(); }
        private object Activate_40_Message() { return new global::Caritathelp.Message.Message(); }
        private object Activate_41_MessageProfil() { return new global::Caritathelp.Message.MessageProfil(); }
        private object Activate_42_UpdageMessage() { return new global::Caritathelp.Message.UpdageMessage(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Caritathelp.Caritathelp_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Caritathelp.All.BasePage
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_BasePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Caritathelp.All.GUI.PopField
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_2_PopField;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  Caritathelp.All.GUI.ErrorControl
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_3_ErrorControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Caritathelp.All.Accueil
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_4_Accueil;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Caritathelp.All.GUI.CommentContro
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Caritathelp.All.GUI.ConfirmControl
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Caritathelp.All.GUI.CreateGUI.CheckField
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Caritathelp.All.GUI.CreateGUI.ComboBoxControl
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Caritathelp.All.GUI.CreateGUI.DateControls
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Caritathelp.All.GUI.CreateGUI.DescriptionControls
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Caritathelp.All.GUI.CreateGUI.HourControl
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Caritathelp.All.GUI.CreateGUI.TitleContro
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  Caritathelp.All.GUI.InputBox
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_14_InputBox;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Caritathelp.All.GUI.InvitationWaiting
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_15_InvitationWaiting;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Caritathelp.All.GUI.ListManagement
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_16_ListManagement;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Caritathelp.All.GUI.ManagementButton
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_17_ManagementButton;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Caritathelp.All.GUI.Message.ListMessageControl
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Caritathelp.All.GUI.Message.MessageControl
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Caritathelp.All.GUI.NewControle
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_20_NewControle;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Caritathelp.All.GUI.Notification
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Caritathelp.All.GUI.ReceivedInviation
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_22_ReceivedInviation;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Caritathelp.All.GUI.SearchItem
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_23_SearchItem;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Caritathelp.All.Models.GenericCreationModel
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_GenericCreationModel;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Caritathelp.All.Models.GenericInvitation
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_25_GenericInvitation;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  Caritathelp.All.Models.GenericListModel
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_26_GenericListModel;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Caritathelp.All.Models.GenericListModelManagement
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_GenericListModelManagement;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  Caritathelp.All.Models.GenericManagement
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_28_GenericManagement;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  Caritathelp.All.Models.GenericNotification
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_GenericNotification;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Caritathelp.All.Models.GenericProfil
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_GenericProfil;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Caritathelp.All.Models.VolunteerPart.PasswordChange
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_PasswordChange;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Caritathelp.All.Options
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_Options;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  Caritathelp.All.FinalInscription
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_FinalInscription;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  Caritathelp.All.Inscription
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_34_Inscription;
                userType.AddMemberName("Name");
                userType.AddMemberName("Warning");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  Windows.UI.Xaml.Controls.TextBox
                xamlType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 36:   //  Windows.UI.Xaml.Controls.TextBlock
                xamlType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  Caritathelp.MainPage
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_37_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  Caritathelp.All.Research
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_Research;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  Caritathelp.Message.CreateMessage
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_39_CreateMessage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  Caritathelp.Message.Message
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_40_Message;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  Caritathelp.Message.MessageProfil
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_41_MessageProfil;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  Caritathelp.Message.UpdageMessage
                userType = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_42_UpdageMessage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Caliburn.Micro.XamlMetadataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_Inscription_Name(object instance)
        {
            var that = (global::Caritathelp.All.Inscription)instance;
            return that.Name;
        }
        private object get_1_Inscription_Warning(object instance)
        {
            var that = (global::Caritathelp.All.Inscription)instance;
            return that.Warning;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Caritathelp.Caritathelp_XamlTypeInfo.XamlMember xamlMember = null;
            global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Caritathelp.All.Inscription.Name":
                userType = (global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Caritathelp.All.Inscription");
                xamlMember = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlMember(this, "Name", "Windows.UI.Xaml.Controls.TextBox");
                xamlMember.Getter = get_0_Inscription_Name;
                xamlMember.SetIsReadOnly();
                break;
            case "Caritathelp.All.Inscription.Warning":
                userType = (global::Caritathelp.Caritathelp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Caritathelp.All.Inscription");
                xamlMember = new global::Caritathelp.Caritathelp_XamlTypeInfo.XamlMember(this, "Warning", "Windows.UI.Xaml.Controls.TextBlock");
                xamlMember.Getter = get_1_Inscription_Warning;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Caritathelp.Caritathelp_XamlTypeInfo.XamlSystemBaseType
    {
        global::Caritathelp.Caritathelp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Caritathelp.Caritathelp_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Caritathelp.Caritathelp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Caritathelp.Caritathelp_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}









